package org.teleight.td.codegenerator.rebuilder;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ParserConfiguration;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.symbolsolver.JavaSymbolSolver;
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import org.teleight.td.codegenerator.rebuilder.types.ClassRebuilder;
import org.teleight.td.codegenerator.rebuilder.types.FieldRebuilder;
import org.teleight.td.codegenerator.extractor.TdClassType;
import org.teleight.td.codegenerator.rebuilder.types.ConstructorRebuilder;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class Rebuilder {

    public void remap(File classFile, TdClassType classType) throws IOException {
        final String classFilePath = classFile.getAbsolutePath();
        final String classContentAsString = new String(Files.readAllBytes(Paths.get(classFilePath)));

        ParserConfiguration parserConfiguration = new ParserConfiguration()
                .setSymbolResolver(new JavaSymbolSolver(new ReflectionTypeSolver()));

        JavaParser javaParser = new JavaParser(parserConfiguration);
        CompilationUnit compilationUnit = javaParser.parse(classContentAsString).getResult().orElse(null);
        if(compilationUnit == null){
            System.err.println("Compilation unit is null for: " + classFile.getName());
            return;
        }


        final String fileName = classFile.getName();
        final String className = fileName.substring(0,fileName.lastIndexOf("."));


        TypeSpec.Builder classBuilder = TypeSpec.classBuilder(className);
        compilationUnit.accept(new ClassRebuilder(), classBuilder);
        compilationUnit.accept(new FieldRebuilder(), classBuilder);
        compilationUnit.accept(new ConstructorRebuilder(), classBuilder);


        final JavaFile javaFile = JavaFile
                .builder(classType.getPackageName(), classBuilder.build())
                .build();

        final File autogeneratedPath = new File("src\\autogenerated\\java");
        javaFile.writeTo(autogeneratedPath);
    }

}
